---
# Deployment с настройками для отказоустойчивости и эффективного использования ресурсов
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  labels:
    app: web-app
    tier: backend
spec:
  replicas: 4  # Оптимальное количество по нагрузочным тестам
  revisionHistoryLimit: 3  # Хранение истории для rollback
  selector:
    matchLabels:
      app: web-app
  strategy:
    rollingUpdate:
      maxSurge: 1  # Плавное обновление
      maxUnavailable: 0  # Гарантия доступности
  template:
    metadata:
      labels:
        app: web-app
        tier: backend
      annotations:
        prometheus.io/scrape: "true"  # Для мониторинга
    spec:
      # Жёсткое распределение по зонам и нодам
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "topology.kubernetes.io/zone"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app: web-app
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "ScheduleAnyway"
          labelSelector:
            matchLabels:
              app: web-app
      
      affinity:
        # Предпочитаем разносить поды по разным нодам
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: [web-app]
                topologyKey: "kubernetes.io/hostname"
      
      containers:
        - name: web-app
          image: your-registry/web-app:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          
          # Точные настройки ресурсов
          resources:
            requests:
              cpu: "0.2"  # Базовый запрос с учётом стартовой нагрузки
              memory: "128Mi"
            limits:
              cpu: "0.5"  # Защита от "распухания"
              memory: "256Mi"  # +100% к обычному потреблению
          
          # Проверки состояния
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            failureThreshold: 30  # 30s на инициализацию
            periodSeconds: 1
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
          
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            failureThreshold: 3
          
          # Настройки для graceful shutdown
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]  # Даём время завершить соединения
          
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: JAVA_OPTS  # Пример для Java-приложения
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"

      # Общие настройки
      terminationGracePeriodSeconds: 40  # > чем preStop sleep
      restartPolicy: Always
      schedulerName: default-scheduler

---
# Horizontal Pod Autoscaler для дневного масштабирования
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-app
  minReplicas: 2  # Ночной минимум
  maxReplicas: 6   # Запас сверх тестового значения
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70  # Оптимальный уровень загрузки
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Защита от резких снижений
      policies:
        - type: Percent
          value: 20
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 30
          periodSeconds: 30

---
# CronHPA для предсказуемого ночного снижения нагрузки
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: web-app-night-scaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-app
  minReplicas: 1  # Агрессивное снижение ночью
  maxReplicas: 4
  behavior:
    scaleDown:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 3600  # Плавное уменьшение
  schedules:
    - name: "night"
      description: "Night time scaling"
      schedule: "0 0 * * *"  # Каждый день в полночь
      minReplicas: 1
      maxReplicas: 2
    - name: "morning"
      description: "Morning scaling"
      schedule: "0 7 * * *"  # В 7 утра возвращаем
      minReplicas: 3
      maxReplicas: 4

---
# Service для доступа к приложению
apiVersion: v1
kind: Service
metadata:
  name: web-app-service
spec:
  selector:
    app: web-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP  # Для внутреннего доступа
  # Для внешнего доступа используйте LoadBalancer:
  # type: LoadBalancer
  # externalTrafficPolicy: Local  # Сохранение source IP

---
# PodDisruptionBudget для защиты от случайных downtime
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: web-app-pdb
spec:
  minAvailable: 3  # Всегда доступно ≥3 подов
  selector:
    matchLabels:
      app: web-app